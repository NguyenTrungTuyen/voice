from TTS.api import TTS
import os
import librosa
import numpy as np
from pydub import AudioSegment
import warnings
warnings.filterwarnings("ignore")

class VietnameseTTS:
    def __init__(self):
        # S·ª≠ d·ª•ng model XTTS v2 - h·ªó tr·ª£ voice cloning v√† multilingual
        self.model_name = "tts_models/multilingual/multi-dataset/xtts_v2"
        print(f"üîÑ ƒêang t·∫£i model: {self.model_name}")
        
        try:
            self.tts = TTS(model_name=self.model_name, progress_bar=True, gpu=False)
            print("‚úÖ Model ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i model: {e}")
            # Fallback sang model kh√°c
            self.model_name = "tts_models/en/ljspeech/vits"
            print(f"üîÑ Th·ª≠ model backup: {self.model_name}")
            self.tts = TTS(model_name=self.model_name, progress_bar=True, gpu=False)
    
    def preprocess_audio(self, audio_path, target_sr=22050):
        """Ti·ªÅn x·ª≠ l√Ω file audio ƒë·ªÉ t·ªëi ∆∞u cho voice cloning"""
        try:
            # ƒê·ªçc file audio
            y, sr = librosa.load(audio_path, sr=None)
            
            # Chuy·ªÉn v·ªÅ mono n·∫øu c·∫ßn
            if len(y.shape) > 1:
                y = librosa.to_mono(y)
            
            # Resample v·ªÅ target sample rate
            if sr != target_sr:
                y = librosa.resample(y, orig_sr=sr, target_sr=target_sr)
            
            # Normalize audio
            y = librosa.util.normalize(y)
            
            # Trim silence
            y, _ = librosa.effects.trim(y, top_db=20)
            
            # L∆∞u file ƒë√£ x·ª≠ l√Ω
            processed_path = audio_path.replace('.wav', '_processed.wav')
            import soundfile as sf
            sf.write(processed_path, y, target_sr)
            
            return processed_path, True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω audio: {e}")
            return audio_path, False
    
    def check_wav_file(self, file_path):
        """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa file WAV"""
        try:
            if not os.path.exists(file_path):
                print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {file_path}")
                return False
                
            y, sr = librosa.load(file_path, sr=None)
            
            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng
            if not file_path.lower().endswith('.wav'):
                print("‚ö†Ô∏è File kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng .WAV")
                return False
            
            # Ki·ªÉm tra ƒë·ªô d√†i (√≠t nh·∫•t 3 gi√¢y, t·ªëi ƒëa 30 gi√¢y cho voice cloning)
            duration = len(y) / sr
            if duration < 3:
                print(f"‚ö†Ô∏è File qu√° ng·∫Øn ({duration:.1f}s). C·∫ßn √≠t nh·∫•t 3 gi√¢y.")
                return False
            elif duration > 30:
                print(f"‚ö†Ô∏è File qu√° d√†i ({duration:.1f}s). N√™n d∆∞·ªõi 30 gi√¢y.")
            
            print(f"‚úÖ File h·ª£p l·ªá: {duration:.1f}s, {sr}Hz")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra file: {e}")
            return False
    
    def text_to_speech(self, text, voice_path=None, output_path="output.wav", language="vi"):
        """Chuy·ªÉn text th√†nh speech v·ªõi voice cloning"""
        try:
            print(f"üìù Text: {text[:50]}...")
            
            if voice_path and os.path.exists(voice_path):
                if self.check_wav_file(voice_path):
                    # Ti·ªÅn x·ª≠ l√Ω audio
                    processed_voice, success = self.preprocess_audio(voice_path)
                    
                    if success:
                        print(f"üîä ƒêang clone gi·ªçng t·ª´: {voice_path}")
                        
                        # S·ª≠ d·ª•ng XTTS v2 v·ªõi voice cloning
                        if "xtts" in self.model_name:
                            self.tts.tts_to_file(
                                text=text,
                                speaker_wav=processed_voice,
                                language=language,
                                file_path=output_path
                            )
                        else:
                            # Fallback cho c√°c model kh√°c
                            self.tts.tts_to_file(
                                text=text,
                                speaker_wav=processed_voice,
                                file_path=output_path
                            )
                    else:
                        print("‚ö†Ô∏è S·ª≠ d·ª•ng gi·ªçng m·∫∑c ƒë·ªãnh do l·ªói x·ª≠ l√Ω file.")
                        self.tts.tts_to_file(text=text, file_path=output_path)
                else:
                    print("‚ö†Ô∏è File gi·ªçng kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng gi·ªçng m·∫∑c ƒë·ªãnh.")
                    self.tts.tts_to_file(text=text, file_path=output_path)
            else:
                print("‚ö†Ô∏è Kh√¥ng c√≥ file gi·ªçng, s·ª≠ d·ª•ng gi·ªçng m·∫∑c ƒë·ªãnh.")
                self.tts.tts_to_file(text=text, file_path=output_path)
            
            if os.path.exists(output_path):
                print(f"‚úÖ ƒê√£ t·∫°o file: {output_path}")
                return True
            else:
                print("‚ùå Kh√¥ng th·ªÉ t·∫°o file output")
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o speech: {e}")
            return False

def main():
    # Kh·ªüi t·∫°o TTS
    vn_tts = VietnameseTTS()
    
    # VƒÉn b·∫£n ti·∫øng Vi·ªát
    text = """
    Top 15 cu·ªën s√°ch n√™n ƒë·ªçc trong ƒë·ªùi:
    TrƒÉm nƒÉm c√¥ ƒë∆°n ‚Äì Gabriel Garc√≠a M√°rquez
    V≈© tr·ª• - Carl Sagan
    L∆∞·ª£c s·ª≠ v·∫°n v·∫≠t - Bill Bryson
    ƒê·∫Øc nh√¢n t√¢m - Dale Carnegie
    B√° t∆∞·ªõc Monte Cristo - Alexandre Dumas
    """
    
    # ƒê∆∞·ªùng d·∫´n file
    base_dir = os.path.dirname(os.path.abspath(__file__))
    voice_path = os.path.join(base_dir, "dyi.wav")
    output_path = os.path.join(base_dir, "output_vietnamese.wav")
    
    # T·∫°o speech
    success = vn_tts.text_to_speech(
        text=text,
        voice_path=voice_path,
        output_path=output_path,
        language="vi"
    )
    
    if success:
        print(f"üéôÔ∏è File gi·ªçng m·∫´u: {voice_path}")
        print(f"üíæ File ƒë√£ l∆∞u: {output_path}")
        
        # M·ªü file (Windows)
        try:
            os.system(f'start "" "{output_path}"')
        except:
            print("Kh√¥ng th·ªÉ m·ªü file t·ª± ƒë·ªông. Vui l√≤ng m·ªü th·ªß c√¥ng.")
    else:
        print("‚ùå Kh√¥ng th·ªÉ t·∫°o file speech")

if __name__ == "__main__":
    main()
